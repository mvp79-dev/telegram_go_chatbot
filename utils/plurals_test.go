package utils

import (
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"

	"golang.org/x/text/language"
	"golang.org/x/text/message"
)

func TestPlurals(t *testing.T) {
	prt := message.NewPrinter(language.Russian)
	require.NotNil(t, prt)

	msg := prt.Sprintf("<code>üí• %v %v%v.\n–†–µ—Å–ø–∞–≤–Ω —á–µ—Ä–µ–∑ %d –º–∏–Ω.</code>", "Fake Sender", "", "Fake Reason", 5)
	assert.Contains(t, msg, "5 –º–∏–Ω—É—Ç")
	msg = prt.Sprintf("<code>üí• %v %v%v.\n–†–µ—Å–ø–∞–≤–Ω —á–µ—Ä–µ–∑ %d –º–∏–Ω.</code>", "Fake Sender", "", "Fake Reason", 42)
	assert.Contains(t, msg, "42 –º–∏–Ω—É—Ç—ã")
	msg = prt.Sprintf("<code>üí• %v %v%v.\n–†–µ—Å–ø–∞–≤–Ω —á–µ—Ä–µ–∑ %d –º–∏–Ω.</code>", "Fake Sender", "", "Fake Reason", 451)
	assert.Contains(t, msg, "451 –º–∏–Ω—É—Ç—É")

	msg = prt.Sprintf("üí• %v %v–ø—Ä–∏—Å—Ç—Ä–µ–ª–∏–ª %v.\n%v –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –Ω–∞ —Ä–µ—Å–ø–∞–≤–Ω –Ω–∞ %d –º–∏–Ω.", "Fake Admin", "", "Fake User", "Fake User", 8)
	assert.Contains(t, msg, "8 –º–∏–Ω—É—Ç")
	msg = prt.Sprintf("üí• %v %v–ø—Ä–∏—Å—Ç—Ä–µ–ª–∏–ª %v.\n%v –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –Ω–∞ —Ä–µ—Å–ø–∞–≤–Ω –Ω–∞ %d –º–∏–Ω.", "Fake Admin", "", "Fake User", "Fake User", 42)
	assert.Contains(t, msg, "42 –º–∏–Ω—É—Ç—ã")
	msg = prt.Sprintf("üí• %v %v–ø—Ä–∏—Å—Ç—Ä–µ–ª–∏–ª %v.\n%v –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –Ω–∞ —Ä–µ—Å–ø–∞–≤–Ω –Ω–∞ %d –º–∏–Ω.", "Fake Admin", "", "Fake User", "Fake User", 451)
	assert.Contains(t, msg, "451 –º–∏–Ω—É—Ç—É")

	msg = prt.Sprintf("ü§´ %v %v–ø–æ–ø—Ä–æ—Å–∏–ª %v –ø–æ–º–æ–ª—á–∞—Ç—å %d –º–∏–Ω—É—Ç.", "Fake Admin", "", "Fake User", 15)
	assert.Contains(t, msg, "15 –º–∏–Ω—É—Ç")
	msg = prt.Sprintf("ü§´ %v %v–ø–æ–ø—Ä–æ—Å–∏–ª %v –ø–æ–º–æ–ª—á–∞—Ç—å %d –º–∏–Ω—É—Ç.", "Fake Admin", "", "Fake User", 42)
	assert.Contains(t, msg, "42 –º–∏–Ω—É—Ç")
	msg = prt.Sprintf("ü§´ %v %v–ø–æ–ø—Ä–æ—Å–∏–ª %v –ø–æ–º–æ–ª—á–∞—Ç—å %d –º–∏–Ω—É—Ç.", "Fake Admin", "", "Fake User", 451)
	assert.Contains(t, msg, "451 –º–∏–Ω—É—Ç—É")

	msg = prt.Sprintf("–£ —Ç–µ–±—è %d –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.", 1)
	assert.Contains(t, msg, "1 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
	msg = prt.Sprintf("–£ —Ç–µ–±—è %d –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.", 2)
	assert.Contains(t, msg, "2 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è")
	msg = prt.Sprintf("–£ —Ç–µ–±—è %d –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.", 7)
	assert.Contains(t, msg, "7 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")

	msg = prt.Sprintf("%vüòà –ù–∞–≤–æ–¥–∏—Ç —Ä–µ–≤–æ–ª—å–≤–µ—Ä –Ω–∞ %v –∏ —Å—Ç—Ä–µ–ª—è–µ—Ç.\n–Ø —Ö–∑ –∫–∞–∫ —ç—Ç–æ –æ–±—ä—è—Å–Ω–∏—Ç—å, –Ω–æ %v –ø–æ–±–µ–¥–∏—Ç–µ–ª—å!\n%v –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –Ω–∞ —Ä–µ—Å–ø–∞–≤–Ω –Ω–∞ %d –º–∏–Ω.",
		"Fake Admin", "Fake User", "Fake Admin", "Fake User", 16)
	assert.Contains(t, msg, "16 –º–∏–Ω—É—Ç")
	msg = prt.Sprintf("%vüòà –ù–∞–≤–æ–¥–∏—Ç —Ä–µ–≤–æ–ª—å–≤–µ—Ä –Ω–∞ %v –∏ —Å—Ç—Ä–µ–ª—è–µ—Ç.\n–Ø —Ö–∑ –∫–∞–∫ —ç—Ç–æ –æ–±—ä—è—Å–Ω–∏—Ç—å, –Ω–æ %v –ø–æ–±–µ–¥–∏—Ç–µ–ª—å!\n%v –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –Ω–∞ —Ä–µ—Å–ø–∞–≤–Ω –Ω–∞ %d –º–∏–Ω.",
		"Fake Admin", "Fake User", "Fake Admin", "Fake User", 23)
	assert.Contains(t, msg, "23 –º–∏–Ω—É—Ç—ã")
	msg = prt.Sprintf("%vüòà –ù–∞–≤–æ–¥–∏—Ç —Ä–µ–≤–æ–ª—å–≤–µ—Ä –Ω–∞ %v –∏ —Å—Ç—Ä–µ–ª—è–µ—Ç.\n–Ø —Ö–∑ –∫–∞–∫ —ç—Ç–æ –æ–±—ä—è—Å–Ω–∏—Ç—å, –Ω–æ %v –ø–æ–±–µ–¥–∏—Ç–µ–ª—å!\n%v –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –Ω–∞ —Ä–µ—Å–ø–∞–≤–Ω –Ω–∞ %d –º–∏–Ω.",
		"Fake Admin", "Fake User", "Fake Admin", "Fake User", 451)
	assert.Contains(t, msg, "451 –º–∏–Ω—É—Ç—É")

	msg = prt.Sprintf("%v\n–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –¥—É—ç–ª–∏: %v.\n%v –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –Ω–∞ —Ä–µ—Å–ø–∞–≤–Ω –Ω–∞ %d –º–∏–Ω.",
		"Fake reason", "Fake Admin", "Fake User", 16)
	assert.Contains(t, msg, "16 –º–∏–Ω—É—Ç")
	msg = prt.Sprintf("%v\n–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –¥—É—ç–ª–∏: %v.\n%v –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –Ω–∞ —Ä–µ—Å–ø–∞–≤–Ω –Ω–∞ %d –º–∏–Ω.",
		"Fake reason", "Fake Admin", "Fake User", 23)
	assert.Contains(t, msg, "23 –º–∏–Ω—É—Ç—ã")
	msg = prt.Sprintf("%v\n–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –¥—É—ç–ª–∏: %v.\n%v –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –Ω–∞ —Ä–µ—Å–ø–∞–≤–Ω –Ω–∞ %d –º–∏–Ω.",
		"Fake reason", "Fake Admin", "Fake User", 451)
	assert.Contains(t, msg, "451 –º–∏–Ω—É—Ç—É")

	msg = prt.Sprintf("%d —Å–º–µ—Ä—Ç–µ–π", 1)
	assert.Contains(t, msg, "1 —Å–º–µ—Ä—Ç—å")
	msg = prt.Sprintf("%d —Å–º–µ—Ä—Ç–µ–π", 2)
	assert.Contains(t, msg, "2 —Å–º–µ—Ä—Ç–∏")
	msg = prt.Sprintf("%d —Å–º–µ—Ä—Ç–µ–π", 7)
	assert.Contains(t, msg, "7 —Å–º–µ—Ä—Ç–µ–π")

	msg = prt.Sprintf("%d –ø–æ–±–µ–¥", 1)
	assert.Contains(t, msg, "1 –ø–æ–±–µ–¥–∞")
	msg = prt.Sprintf("%d –ø–æ–±–µ–¥", 2)
	assert.Contains(t, msg, "2 –ø–æ–±–µ–¥—ã")
	msg = prt.Sprintf("%d –ø–æ–±–µ–¥", 7)
	assert.Contains(t, msg, "7 –ø–æ–±–µ–¥")

	msg = prt.Sprintf("%v. %v - %d —Ä–∞–∑\n", "something", "something", 16)
	assert.Contains(t, msg, "16 —Ä–∞–∑")
	msg = prt.Sprintf("%v. %v - %d —Ä–∞–∑\n", "something", "something", 23)
	assert.Contains(t, msg, "23 —Ä–∞–∑–∞")
	msg = prt.Sprintf("%v. %v - %d —Ä–∞–∑\n", "something", "something", 51)
	assert.Contains(t, msg, "51 —Ä–∞–∑")

	msg = prt.Sprintf("–í —ç—Ç–æ–º –≥–æ–¥—É —Ç—ã –±—ã–ª –ø–∏–¥–æ—Ä–æ–º –¥–Ω—è ‚Äî %d —Ä–∞–∑", 16)
	assert.Contains(t, msg, "16 —Ä–∞–∑")
	msg = prt.Sprintf("–í —ç—Ç–æ–º –≥–æ–¥—É —Ç—ã –±—ã–ª –ø–∏–¥–æ—Ä–æ–º –¥–Ω—è ‚Äî %d —Ä–∞–∑", 23)
	assert.Contains(t, msg, "23 —Ä–∞–∑–∞")
	msg = prt.Sprintf("–í —ç—Ç–æ–º –≥–æ–¥—É —Ç—ã –±—ã–ª –ø–∏–¥–æ—Ä–æ–º –¥–Ω—è ‚Äî %d —Ä–∞–∑", 51)
	assert.Contains(t, msg, "51 —Ä–∞–∑")

	msg = prt.Sprintf("–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è —Ç—ã –±—ã–ª –ø–∏–¥–æ—Ä–æ–º –¥–Ω—è ‚Äî %d —Ä–∞–∑!", 16)
	assert.Contains(t, msg, "16 —Ä–∞–∑")
	msg = prt.Sprintf("–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è —Ç—ã –±—ã–ª –ø–∏–¥–æ—Ä–æ–º –¥–Ω—è ‚Äî %d —Ä–∞–∑!", 23)
	assert.Contains(t, msg, "23 —Ä–∞–∑–∞")
	msg = prt.Sprintf("–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è —Ç—ã –±—ã–ª –ø–∏–¥–æ—Ä–æ–º –¥–Ω—è ‚Äî %d —Ä–∞–∑!", 51)
	assert.Contains(t, msg, "51 —Ä–∞–∑")

	msg = prt.Sprintf("\n–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ‚Äî %d", 16)
	assert.Contains(t, msg, "16 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
	msg = prt.Sprintf("\n–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ‚Äî %d", 23)
	assert.Contains(t, msg, "23 —É—á–∞—Å—Ç–Ω–∏–∫–∞")
	msg = prt.Sprintf("\n–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ‚Äî %d", 51)
	assert.Contains(t, msg, "51 —É—á–∞—Å—Ç–Ω–∏–∫")
}
