package roulette

import (
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/NexonSU/telegram-go-chatbot/app/utils"
	"gopkg.in/tucnak/telebot.v3"
)

var Message *telebot.Message
var Selector = telebot.ReplyMarkup{}
var AcceptButton = Selector.Data("üëç –ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤", "russianroulette_accept")
var DenyButton = Selector.Data("üëé –ë–µ–∂–∞—Ç—å —Å –ø–æ–∑–æ—Ä–æ–º", "russianroulette_deny")
var busy = make(map[string]bool)

func Request(context telebot.Context) error {
	if Message == nil {
		Message = context.Message()
		Message.Unixtime = 0
	}
	if busy["bot_is_dead"] {
		if time.Now().Unix()-Message.Time().Unix() > 3600 {
			busy["bot_is_dead"] = false
		} else {
			return context.Reply("–Ø –Ω–µ –º–æ–≥—É –ø—Ä–æ–≤–µ—Å—Ç–∏ –∏–≥—Ä—É, —Ç.–∫. —è –Ω–µ–º–Ω–æ–≥–æ —É–º–µ—Ä. –ó–∞–π–¥–∏—Ç–µ –ø–æ–∑–∂–µ.")
		}
	}
	if busy["russianroulettePending"] && !busy["russianrouletteInProgress"] && time.Now().Unix()-Message.Time().Unix() > 60 {
		busy["russianroulette"] = false
		busy["russianroulettePending"] = false
		busy["russianrouletteInProgress"] = false
		return context.Edit(fmt.Sprintf("%v –Ω–µ –ø—Ä–∏—à–µ–ª –Ω–∞ –¥—É—ç–ª—å.", utils.UserFullName(Message.Entities[0].User)))
	}
	if busy["russianrouletteInProgress"] && time.Now().Unix()-Message.Time().Unix() > 120 {
		busy["russianroulette"] = false
		busy["russianroulettePending"] = false
		busy["russianrouletteInProgress"] = false
	}
	if busy["russianroulette"] || busy["russianroulettePending"] || busy["russianrouletteInProgress"] {
		return context.Reply("–ö–æ–º–∞–Ω–¥–∞ –∑–∞–Ω—è—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}
	busy["russianroulette"] = true
	defer func() { busy["russianroulette"] = false }()
	var text = strings.Split(context.Text(), " ")
	if (context.Message().ReplyTo == nil && len(text) != 2) || (context.Message().ReplyTo != nil && len(text) != 1) {
		return context.Reply("–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: <code>/russianroulette {ID –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º}</code>\n–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–∞–∫–æ–µ-–ª–∏–±–æ —Å–æ–æ–±—â–µ–Ω–∏–µ <code>/russianroulette</code>")
	}
	target, _, err := utils.FindUserInMessage(context)
	if err != nil {
		return context.Reply(fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n<code>%v</code>", err.Error()))
	}
	if target.ID == context.Sender().ID {
		return context.Reply("–ö–∞–∫ —Ç—ã —Å–µ–±–µ —ç—Ç–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—à—å? –ù–µ—Ç, –Ω–µ–ª—å–∑—è –≤—ã–∑–≤–∞—Ç—å –Ω–∞ –¥—É—ç–ª—å —Å–∞–º–æ–≥–æ —Å–µ–±—è.")
	}
	if target.IsBot {
		return context.Reply("–ë–æ—Ç–∞ –Ω–µ–ª—å–∑—è –≤—ã–∑–≤–∞—Ç—å –Ω–∞ –¥—É—ç–ª—å.")
	}
	ChatMember, err := utils.Bot.ChatMemberOf(context.Chat(), &target)
	if err != nil {
		return context.Reply(fmt.Sprintf("–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–∞—Ç–∞:\n<code>%v</code>", err.Error()))
	}
	log.Println(ChatMember)
	if false {
		err := context.Reply("–ù–µ–ª—å–∑—è –≤—ã–∑–≤–∞—Ç—å –Ω–∞ –¥—É—ç–ª—å –º–µ—Ä—Ç–≤–µ—Ü–∞.")
		if err != nil {
			return err
		}
		return err
	}
	err = utils.Bot.Delete(context.Message())
	if err != nil {
		return err
	}
	Selector.Inline(
		Selector.Row(AcceptButton, DenyButton),
	)
	Message, err = utils.Bot.Send(context.Chat(), fmt.Sprintf("%v! %v –≤—ã–∑—ã–≤–∞–µ—Ç —Ç–µ–±—è –Ω–∞ –¥—É—ç–ª—å!", utils.MentionUser(&target), utils.MentionUser(context.Sender())), &Selector)
	if err != nil {
		return err
	}
	busy["russianroulettePending"] = true
	return err
}
